// Code generated by MockGen. DO NOT EDIT.
// Source: internal/booking/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/booking/repository.go -destination=internal/mocks/mock_booking_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	booking "ticket-booking/internal/booking"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockBookingRepository is a mock of BookingRepository interface.
type MockBookingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookingRepositoryMockRecorder
	isgomock struct{}
}

// MockBookingRepositoryMockRecorder is the mock recorder for MockBookingRepository.
type MockBookingRepositoryMockRecorder struct {
	mock *MockBookingRepository
}

// NewMockBookingRepository creates a new mock instance.
func NewMockBookingRepository(ctrl *gomock.Controller) *MockBookingRepository {
	mock := &MockBookingRepository{ctrl: ctrl}
	mock.recorder = &MockBookingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingRepository) EXPECT() *MockBookingRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookingRepository) Create(tx *gorm.DB, b *booking.Booking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBookingRepositoryMockRecorder) Create(tx, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookingRepository)(nil).Create), tx, b)
}

// Get mocks base method.
func (m *MockBookingRepository) Get(id string) (*booking.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*booking.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBookingRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBookingRepository)(nil).Get), id)
}

// ListConfirmedByEvent mocks base method.
func (m *MockBookingRepository) ListConfirmedByEvent(ctx context.Context, eventID string) ([]*booking.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfirmedByEvent", ctx, eventID)
	ret0, _ := ret[0].([]*booking.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfirmedByEvent indicates an expected call of ListConfirmedByEvent.
func (mr *MockBookingRepositoryMockRecorder) ListConfirmedByEvent(ctx, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfirmedByEvent", reflect.TypeOf((*MockBookingRepository)(nil).ListConfirmedByEvent), ctx, eventID)
}

// ListPendingOlderThan mocks base method.
func (m *MockBookingRepository) ListPendingOlderThan(ctx context.Context, cutoff string) ([]*booking.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingOlderThan", ctx, cutoff)
	ret0, _ := ret[0].([]*booking.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingOlderThan indicates an expected call of ListPendingOlderThan.
func (mr *MockBookingRepositoryMockRecorder) ListPendingOlderThan(ctx, cutoff any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingOlderThan", reflect.TypeOf((*MockBookingRepository)(nil).ListPendingOlderThan), ctx, cutoff)
}

// UpdateStatus mocks base method.
func (m *MockBookingRepository) UpdateStatus(ctx context.Context, id string, status booking.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockBookingRepositoryMockRecorder) UpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockBookingRepository)(nil).UpdateStatus), ctx, id, status)
}
