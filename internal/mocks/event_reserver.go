// Code generated by MockGen. DO NOT EDIT.
// Source: ticket-booking/internal/booking (interfaces: EventReserver)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/event_reserver.go -package=mocks ticket-booking/internal/booking EventReserver
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	event "ticket-booking/internal/event"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockEventReserver is a mock of EventReserver interface.
type MockEventReserver struct {
	ctrl     *gomock.Controller
	recorder *MockEventReserverMockRecorder
	isgomock struct{}
}

// MockEventReserverMockRecorder is the mock recorder for MockEventReserver.
type MockEventReserverMockRecorder struct {
	mock *MockEventReserver
}

// NewMockEventReserver creates a new mock instance.
func NewMockEventReserver(ctrl *gomock.Controller) *MockEventReserver {
	mock := &MockEventReserver{ctrl: ctrl}
	mock.recorder = &MockEventReserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventReserver) EXPECT() *MockEventReserverMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEventReserver) Get(ctx context.Context, id string) (*event.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*event.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEventReserverMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEventReserver)(nil).Get), ctx, id)
}

// Release mocks base method.
func (m *MockEventReserver) Release(ctx context.Context, eventID string, qty int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", ctx, eventID, qty)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockEventReserverMockRecorder) Release(ctx, eventID, qty any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockEventReserver)(nil).Release), ctx, eventID, qty)
}

// Reserve mocks base method.
func (m *MockEventReserver) Reserve(ctx context.Context, eventID string, qty int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reserve", ctx, eventID, qty)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reserve indicates an expected call of Reserve.
func (mr *MockEventReserverMockRecorder) Reserve(ctx, eventID, qty any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reserve", reflect.TypeOf((*MockEventReserver)(nil).Reserve), ctx, eventID, qty)
}

// ReserveTx mocks base method.
func (m *MockEventReserver) ReserveTx(tx *gorm.DB, eventID string, qty int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveTx", tx, eventID, qty)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveTx indicates an expected call of ReserveTx.
func (mr *MockEventReserverMockRecorder) ReserveTx(tx, eventID, qty any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveTx", reflect.TypeOf((*MockEventReserver)(nil).ReserveTx), tx, eventID, qty)
}
