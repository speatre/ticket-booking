networks:
  backend:
  monitoring:

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # HTTP APIs
      - "8081:8081" # Metrics endpoint
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
      - monitoring # Add to monitoring network for Prometheus
    environment:
      - APP_ENV=production
      - POSTGRES_DSN=host=postgres port=5432 user=postgres password=postgres dbname=ticket_booking sslmode=disable
      - REDIS_ADDR=redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - JWT_ACCESS_SECRET=production_access_secret_key_change_in_production_environment
      - JWT_REFRESH_SECRET=production_refresh_secret_key_change_in_production_environment

  postgres:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ticket_booking
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - monitoring
    depends_on:
      - app

  grafana:
    image: grafana/grafana:9.5.0
    ports:
      - "3000:3000"
    networks:
      - monitoring
    depends_on:
      - prometheus
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true # Optional: simplify testing
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - ./configs/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./configs/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/grafana/dashboards:/etc/grafana/dashboards:ro

volumes:
  pgdata:
